//create unique output folders
params.executionTimestamp = new java.text.SimpleDateFormat("yyyy_MM_dd_HH_mm_ss").format(new Date())

//Parameters to adapt run to dataset

params.condaEnvPath     = false   

params.data             = "$launchDir/data"
params.structures       = "$params.data/structures"
params.seqs             = "$params.data/seqs"

params.seqFormat        = "fasta" 
params.seqQC            = 5         
params.dropSimilar      = false        

params.outFolder        = "$launchDir/results/simsa_${params.executionTimestamp}"
params.outName          = "finalMSA"
params.convertMSA       = false

params.createSubsets    = false 
params.minSubsetID      = 20 
params.maxSubsetSize    = true 
params.useSubsets       = false  

params.retrieve         = false        
params.model            = false 
params.localModel       = false        
params.strucQC          = 5          

params.mafftParams      = false       
params.tcoffeeParams    = false         
params.dssp             = false
params.squeeze          = false
params.squeezePerc      = 80
params.reorder          = false     

params.magic            = false


//run all 
if (params.magic){
        params.seqQC            = 5         
        params.dropSimilar      = 90        
        params.outName          = "magicMSA"
        params.createSubsets    = 30 
        params.minSubsetID      = "min"
        params.retrieve         = true        
        params.model            = true         
        params.strucQC          = 5          
        params.dssp             = true
        params.squeeze          = "H"
        params.reorder          = true  
}

//Parameter logics
//there can only be one
if (params.createSubsets) {params.useSubsets = false}

//type test useSubsets
if (params.useSubsets) {assert Boolean.isCase(params.useSubsets), " useSubsets can only be 'true' or 'false', please check your launch file or command line"}

//squeeze requries dssp
if (params.squeeze){params.dssp = true}


report {
    enabled = true
    file = "$params.outFolder/nextflow_report_${params.outName}.html"
    overwrite = true
}
    

profiles {
    standard {
        process {
            executor = 'local'
            conda = "${params.condaEnvPath ? params.condaEnvPath : 'recipes/conda_env_m_apple_simsapiper.yml'}"
            container = 'slheidig/simsapiper:05'

            withName:'runTcoffee'{
                cpus = '4'
                container='diazadriang/simsa-tcoffee:1.0.0'
            }
        }
    }

    server {
        process {
            executor = 'local'
            queueSize = 10
            pollInterval = '5 sec'
            
            conda = "${params.condaEnvPath ? params.condaEnvPath : 'recipes/conda_env_server_simsapiper.yml'}"
            container = 'slheidig/simsapiper:05'
            
            withName:'runTcoffee'{
                cpus = '10'
                container='diazadriang/simsa-tcoffee:1.0.0'
            }
        }
    }

    hpc {
        process {
            executor = 'slurm' 
            cpus ='1'
            memory ='4 GB'
            time ='10min'

            pollInterval = '5 sec'

            container = 'slheidig/simsapiper:05'

            withName:'runTcoffee'{
                cpus = '10'
                memory = { 40.GB * task.attempt }
                time =  { 2.h * task.attempt * task.attempt * task.attempt }

                container='diazadriang/simsa-tcoffee:1.0.0'
            }
        }
    }
  
    hydra { 
        singularity { //for dssp
                enabled = true
                cacheDir = "$VSC_SCRATCH/.apptainer"
        }
        
        process {
            executor = 'slurm' 
            cpus ='1'
            memory ='4 GB'
            time ='10min'

            pollInterval = '5 sec'

            module = 'Biopython/1.79-foss-2022a:SciPy-bundle/2022.05-foss-2022a'

            withName:'runTcoffee'{
                module  = 'T-Coffee/13.45.61.3c310a9:TM-align/20190822-GCC-11.3.0:SAP/1.1.3-GCC-11.3.0 '
                cpus = '10'
                memory = { 40.GB * task.attempt }
                time =  { 2.h * task.attempt * task.attempt * task.attempt }
                //clusterOptions ='--mail-type=ALL'
            }

            withName:'mergeMafft'{
                module    = 'MAFFT/7.505-GCC-11.3.0-with-extensions:Biopython/1.79-foss-2022a:SciPy-bundle/2022.05-foss-2022a'
            }

            withName:'cdHitCollapse' {
                module    = 'CD-HIT/4.8.1-GCC-11.3.0:Biopython/1.79-foss-2022a:SciPy-bundle/2022.05-foss-2022a'
            }

            withName:'cdHitSubsetting' {
                module    = 'CD-HIT/4.8.1-GCC-11.3.0:BLAST+/2.13.0-gompi-2022a:Biopython/1.79-foss-2022a:SciPy-bundle/2022.05-foss-2022a'
            }

             withName:'runDssp' { 
                container   = 'slheidig/dssp3:2'
            }  

            withName:'esmFolds'{
                module  = 'ESM-2/2.0.0-foss-2021a-CUDA-11.3.1:OpenFold/1.0.1-foss-2021a-CUDA-11.3.1:PyTorch-Lightning/1.5.9-foss-2021a-CUDA-11.3.1'
                time =  { 3.h * task.attempt }
                memory = { 30.GB * task.attempt }
                clusterOptions = "--partition=ampere_gpu --nodes=1 --gpus-per-node=1 --ntasks-per-gpu=1 --cpus-per-gpu=8"
                
            }
        }
    }
    



    withdocker {
        docker.enabled = true
        singularity.enabled = false

        docker.temp = 'auto'
        docker.runOptions = '-u \$(id -u):\$(id -g) '
    }

    withsingularity {
        docker.enabled = false
        singularity {
            enabled = true
            runOptions = "-B /run"
        }
    }

    withconda {
        conda.enabled = true
    }
}
